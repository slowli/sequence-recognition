package ua.kiev.icyb.bio.alg;


import java.io.Serializable;

/**
 * Параметрическое дискретное вероятностное распределение на множестве 
 * неотрицательных целых чисел.
 * 
 * <p>Для работы с рапределением следует вначале <em>обучить</em> его
 * путем вызовов метода {@link #digest(int, double)} для определенной выборки <code>D</code>.
 * После этого метод {@link #estimate(int)} возвращает значение логарифмического правдоподобия
 * в заданной точке с использованием параметров распределения, которые максимизируют
 * совместное правдоподобие для прецедентов из обучающей выборки <code>D</code>.
 */
public interface Distribution extends Serializable {
	
	/**
	 * Добавляет число к пулу прецедентов.
	 * 
	 * @param value
	 *    неотрицательное целое число
	 * @param weight
	 *    неотрицательный вес прецедента
	 */
	void digest(int value, double weight);
	
	/**
	 * Очищает все данные, накопленные в результате обучения на прецедентах.
	 */
	void reset();
	
	/**
	 * Вычисляет функцию логарифмического правдоподобия этого распределения в заданной точке.
	 * 
	 * @param value
	 *    неотрицательное целое число, для которого требуется найти правдоподобие
	 * @return
	 *    логарифимическое правдоподобие в заданной точке
	 */
	double estimate(int value);
}
