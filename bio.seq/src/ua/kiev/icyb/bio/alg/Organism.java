package ua.kiev.icyb.bio.alg;

import java.io.Serializable;

/**
 * Интерфейс, представляющий <em>организм</em> (или <em>хромосому</em>), который
 * может использоваться в генетическом алгоритме оптимизации. 
 * 
 * Организм можно представить в виде упорядоченной последовательности бит. На пространстве
 * организмов определены две рандомизированные операции:
 * <ul>
 * <li>унарная операция <em>мутации</em>, в результате которой каждый бит из двоичного представления
 * организма может с определенной вероятностью (вероятность атомарной мутации) поменяться на противоположный бит;
 * <li>бинарная операция <em>скрещивания</em> двух организмов, в результате которой
 * формируется новый организм, каждый бит из двоичного представления которого с равной вероятностью
 * может быть равен соответствующему биту из двоичного представления любого из его «родителей». 
 * </ul>
 * 
 * <p>По аналогии с живыми организмами, объекты класса обладают функционалом качества,
 * определяющим их «выживание» при работе генетического алгоритма.
 */
public interface Organism extends Serializable {
	
	/**
	 * Подвергает организм мутации.
	 *  
	 * @param p 
	 *    вероятность атомарной мутации
	 * @return
	 *    мутировавший организм
	 */
	Organism mutate(double p);
	
	/**
	 * Скрещивает организм с другим организмом.
	 * 
	 * @param other
	 *    организм, с которым проводится скрещивание
	 * @return
	 *    результат скрещивания
	 */
	Organism crossover(Organism other);
	
	/**
	 * Подсчитывает функционал качества для данного организма. Функционал качества
	 * характеризует степень соответствия организма решаемой задачи оптимизации;
	 * чем больше значение функционала, тем «лучше» организм.
	 *  
	 * @return
	 *    значение функционала качества
	 */
	double fitness();
}