package ua.kiev.icyb.bio;

import java.io.Serializable;


/**
 * Общий интерфейс для алгоритмов распознавания скрытых последовательностей,
 * основанных на обучении на прецедентах.
 */
public interface SeqAlgorithm extends Serializable, Trainable, Representable {

	/**
	 * Обучает алгоритм на единичном прецеденте.
	 * 
	 * @param sequence
	 *    прецедент
	 */
	void train(Sequence sequence);

	/**
	 * Обучает алгоритм на выборке, состоящей из набора наблюдаемых и соответствующих им
	 * скрытых состояний.
	 * 
	 * @param set
	 *    выборка, в которую входят прецеденты с известными скрытыми состояниями 
	 */
	void train(SequenceSet set);
	
	@Override
	SeqAlgorithm clone();
	
	@Override
	SeqAlgorithm clearClone();

	/**
	 * Производит распознавание на отдельной строке наблюдаемых состояний.
	 * 
	 * @param sequence
	 *    строка наблюдаемых состояний
	 * @return 
	 *    последовательность скрытых состояний, соответствующая наблюдаемой строке;
	 *    {@code null} в случае отказа от распознавания
	 */
	byte[] run(Sequence sequence);

	/**
	 * Производит распознавание на выборке прецедентов.
	 * 
	 * @param set
	 *    множество строк наблюдаемых состояний
	 * @return 
	 *    множество прецедентов, в котором каждой наблюдаемой строке из <code>set</code>
	 *    соответствует результат распознавания - последовательность скрытых состояний
	 *    той же длины, или {@code null} в случае отказа от классификации
	 */
	SequenceSet runSet(SequenceSet set);

	/**
	 * Производит распознавание на выборке прецедентов с использованием обработчика событий.
	 * 
	 * @param set
	 *    множество строк наблюдаемых состояний
	 * @param listener
	 *    обработчик событий, позволяющий следить за ходом выполнения алгоритма
	 * @return 
	 *    множество прецедентов, в котором каждой наблюдаемой строке из <code>set</code>
	 *    соответствует результат распознавания — последовательность скрытых состояний
	 *    той же длины, или {@code null} в случае отказа от классификации
	 */
	SequenceSet runSet(SequenceSet set, JobListener listener);
}
