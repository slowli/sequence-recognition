<?xml version="1.0" encoding="UTF-8"?>

<!-- Build file for bio.seq library -->
<project name="bio.seq library" default="build-all" basedir=".">

  <!-- Project settings -->
  <property name="version" value="0.10.0"/>

  <!-- Compiler settings -->
  <property name="javac.debug" value="source,lines,vars"/>
  <property name="javac.target" value="1.7"/>
  <property name="javac.source" value="1.7"/>

  <path id="basedir-os">
    <pathelement location="${basedir}" />
  </path>
  <pathconvert property="bio.seq.dir" refid="basedir-os" targetos="unix"/>

  <!-- Source directories -->
  <property name="src.main" value="${bio.seq.dir}/bio.seq/src"/>
  <property name="src.test" value="${bio.seq.dir}/bio.seq/test/java"/>
  <property name="lib.dir" value="${bio.seq.dir}/lib"/>
  <!-- You may need to specify location of the jUnit4 jar here. -->
  <property name="lib.junit" value="${ant.library.dir}/junit.jar"/>

  <!-- Output directories -->
  <property name="build.dir" value="${bio.seq.dir}/bin"/>
  <property name="build.dest" value="${build.dir}/classes"/>
  <property name="build.dest.main" value="${build.dest}/bio.seq"/>
  <property name="build.dest.io" value="${build.dest}/bio.seq.io"/>
  <property name="build.dest.test" value="${build.dest}/test"/>
  <property name="build.javadoc" value="${bio.seq.dir}/docs"/>
  <property name="build.deps" value="${build.dir}/deps"/>

  <!-- JAR files -->
  <property name="jar.main" value="bio.seq-${version}.jar"/>
  <property name="jar.full" value="bio.seq-${version}-full.jar"/>
  <property name="jar.javadoc" value="bio.seq-${version}-javadoc.jar"/>

  <tstamp>
    <format property="build.time" pattern="yyyy-MM-dd HH:mm:ss" />
    <format property="build.year" pattern="yyyy"/>
  </tstamp>

  <target name="env" description="Prints build parameters">
    <echo>
  Input Directories:
    Source:         ${src.main}
    Test source:    ${src.test}
    Libraries:      ${lib.dir}
  Output Directories:
    Classes:        ${build.dest}
    Javadoc:        ${build.javadoc}
    </echo>
  </target>

  <target name="compile-main" description="Compiles library (independent code)">
    <mkdir dir="${build.dest.main}"/>
    <copy todir="${build.dest.main}" includeemptydirs="false">
       <fileset dir="${src.main}">
         <exclude name="**/*.launch"/>
         <exclude name="**/*.java"/>
         <exclude name="**/io/**"/>
       </fileset>
     </copy>
      
    <path id="cp.main">
      <pathelement location="${build.dest.main}"/>
    </path>

    <javac debug="true" 
        debuglevel="${javac.debug}" 
        destdir="${build.dest.main}" 
        includeantruntime="false" 
        source="${javac.source}"
        target="${javac.target}">
      
      <src path="${src.main}"/>
      <!-- exclude IO library -->
      <exclude name="**/io/**" />
      
      <classpath refid="cp.main"/>
    </javac>
  </target>

  <target name="compile-io" description="Compiles library (+ dependent code)" depends="compile-main">
    <mkdir dir="${build.dest.io}"/>
    <copy todir="${build.dest.io}" includeemptydirs="false">
       <fileset dir="${src.main}">
         <include name="**/io/**"/>
         <exclude name="**/*.launch"/>
         <exclude name="**/*.java"/>
       </fileset>
     </copy>  
    
    <path id="cp.io">
      <pathelement location="${build.dest.io}"/>
      <path refid="cp.main"/>
      <pathelement location="${lib.dir}/bytecode-1.8.1.jar"/>
      <pathelement location="${lib.dir}/core-1.8.1.jar"/>
    </path>

    <javac debug="true" 
        debuglevel="${javac.debug}" 
        destdir="${build.dest.io}" 
        includeantruntime="false" 
        source="${javac.source}"
        target="${javac.target}">
      
      <src path="${src.main}"/>
      <include name="**/io/**"/>
      
      <classpath refid="cp.io"/>
    </javac>
  </target>

  <target name="compile" description="Compiles all files" depends="compile-io">
  </target>

  <!-- Testing -->

  <target name="test" description="Test main library" depends="compile">
    <mkdir dir="${build.dest.test}"/>

    <path id="cp.test">
      <pathelement location="${build.dest.test}"/>
      <path refid="cp.io"/>
      <pathelement location="${lib.junit}"/>
    </path>

    <javac debug="true" 
       debuglevel="${javac.debug}" 
       destdir="${build.dest.test}" 
       includeantruntime="false" 
       source="${javac.source}"
       target="${javac.target}">

      <src path="${src.test}"/>
      <classpath refid="cp.test"/>
    </javac>

    <junit haltonerror="yes" haltonfailure="yes" fork="yes">
      <classpath refid="cp.test"/>
      <sysproperty key="testdir" value="${bio.seq.dir}/bio.seq/test"/>

      <formatter type="plain" usefile="false"/>
      <test name="ua.kiev.icyb.bio.test.FastTestSuite"/>
      <test name="ua.kiev.icyb.bio.test.SlowTestSuite"/>
    </junit>
  </target>


  <!-- JAR-related targets -->

  <target name="jar-main" description="Creates JAR file for main library" depends="compile-main">
    <jar jarfile="${build.dir}/${jar.main}">
      <fileset dir="${build.dest.main}"/>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Bundle-Version" value="${version}"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
  </target>

  <target name="copy-deps" description="Copies dependency classes">
    <mkdir dir="${build.deps}"/>
    <unzip src="${lib.dir}/bytecode-1.8.1.jar" dest="${build.deps}">
      <patternset>
        <include name="org/biojava/**" />
      </patternset>
    </unzip>
    <unzip src="${lib.dir}/core-1.8.1.jar" dest="${build.deps}">
      <patternset>
        <include name="org/biojava/**" />
        <!-- exclude unneeded algorithms -->
        <exclude name="org/biojava/bio/dp/**" />
        <exclude name="org/biojava/bio/program/**" />
        <include name="org/biojavax/**" />
      </patternset>
    </unzip>
  </target>

  <target name="jar-full" description="Creates JAR file for library with I/O tools and included dependencies"
      depends="compile,copy-deps">

    <jar jarfile="${build.dir}/${jar.full}">
      <fileset dir="${build.dest.main}"/>
      <fileset dir="${build.dest.io}"/>
      <fileset dir="${build.deps}"/>
      
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Bundle-Version" value="${version}"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>

    <antcall target="clean-deps" />
  </target>

  <target name="jar" description="Creates all JAR files" depends="jar-main,jar-full">
  </target>

  <target name="javadoc" description="Builds Java documentation for the library" depends="compile">
    <mkdir dir="${build.javadoc}"/>

    <javadoc sourcepath="${src.main}"
        packagenames="ua.kiev.icyb.bio.*"
        excludepackagenames="ua.kiev.icyb.bio.test"
        destdir="${build.javadoc}"
        use="true"
        windowtitle="bio.seq API"
        doctitle="bio.seq API"
        locale="ru"
        encoding="UTF-8"
        docencoding="UTF-8"
        charset="UTF-8"
        classpathref="cp.io"
        stylesheetfile="${build.javadoc}/stylesheet.css">

      <link href="http://docs.oracle.com/javase/8/docs/api/"/>
      <link href="http://www.biojava.org/docs/api1.9.0/"/>
    </javadoc>

    <jar jarfile="${build.dir}/${jar.javadoc}">
      <fileset dir="${build.javadoc}"/>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Bundle-Version" value="${version}"/>
      </manifest>
    </jar>
  </target>

  <target name="build-aux" description="Creates auxiliary files">
    <echo file="${build.dir}/env.conf">###########################################
# Sample environment configuration.
#
# Образец файла конфигурации. 
###########################################
# Debug level. Values &lt;= 0 shut off most output.
# Уровень отладки.
env.debug = 2
# Number of computing threads in the pool. Values &lt;= 0 let determine the optimal
# number automatically.
# Количество потоков выполнения.
env.threads = -1
# Locale and encoding for output messages.
# Локаль и кодировка сообщений.
#env.locale = en_US
env.encoding = UTF-8

# You can specify datasets as pairs:
#    [dataset name] = [dataset file]
# Вы можете задавать выборки как пары
#    [имя выборки] = [файл, содержащий выборку]
#set_name = /path/to/file.gz
</echo>

    <replaceregexp file="${build.dir}/setenv.sh" 
        match="lib_version=.*"
        replace="lib_version=${version}" />
  </target>

  <!-- Clean targets -->

  <target name="clean" description="Cleans after compilation">
    <delete dir="${build.dest}"/>
  </target>

  <target name="clean-jar" description="Cleans after creating JAR files" depends="clean-deps">
    <delete file="${build.dir}/${jar.main}"/>
    <delete file="${build.dir}/${jar.full}"/>
  </target>

  <target name="clean-deps" description="Cleans dependency folder">
    <delete dir="${build.deps}"/>
  </target>

  <target name="clean-doc" description="Cleans after generating documentation">
    <delete includeemptydirs="true">
      <fileset dir="${build.javadoc}" includes="**/*" excludes="stylesheet.css" />
    </delete>
    <delete file="${build.dir}/${jar.javadoc}"/>
  </target>

  <target name="clean-aux" description="Cleans auxiliary files">
    <delete file="${build.dir}/env.conf" />
  </target>

  <target name="clean-all" description="Cleans all build files" depends="clean,clean-doc,clean-jar,clean-aux">
    <delete dir="${build.dir}"/>
  </target>

  <!-- Default target -->

  <target name="build-all" description="Builds library, jars, and documentation" depends="env,compile,test,jar,javadoc,build-aux">
  </target>

  <target name="build-notest" description="Builds library, jars, and documentation" depends="env,compile,jar,javadoc,build-aux">
  </target>
</project>
